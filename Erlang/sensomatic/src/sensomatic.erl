-module( sensomatic ).

-export( [ 
	start/0,
	zones/0, 
	add_zone/1,
	remove_zone/1,
	devices/0 
] ).

-behaviour( application ).
-export( [ start/2, stop/1 ] ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% module api
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%==============================================================================
%% start/0
%%
%% @doc Start sensomatic.
%%==============================================================================
start() -> 
	application:start( crypto ),
	application:start( ?MODULE ).

%%==============================================================================
%% zones/0
%%
%% @doc Get a list of running zones
%%==============================================================================
zones() -> 
	lists:map( fun( { Id, Pid, _, _ } ) -> 
		{ Id, Pid } 
	end, supervisor:which_children( zone_sup ) ).

%%==============================================================================
%% add_zone/1
%%
%% @doc Start a new zone with the given Id
%%==============================================================================
add_zone( Id ) ->
	zone_sup:start_zone( Id ).
	
%%==============================================================================
%% remove_zone/1
%% 
%% @doc Kill the specified zone
%%==============================================================================
remove_zone( Id ) ->
	zone_sup:stop_zone( Id ).

%%==============================================================================
%% devices/0
%%
%% @doc Get a list of registered devices
%%==============================================================================
devices() -> 
	lists:map( fun( { Id, Pid, _, _ } ) ->
		{ Id, Pid }
	end, supervisor:which_children( device_sup ) ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% application callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%==============================================================================
%% start/2
%%==============================================================================
start( Type, Args ) -> 
	util:shout( "Starting ~s Type: ~p Args: ~p", [ ?MODULE, Type, Args ] ),
	
	{ ok, _ } = device_sup:start_link(),
	
	register( ?MODULE, self() ),
	
	zone_sup:start_link(),
	
	listener:start_link( 8181, [
		{ active, true },
		{ packet, line },
		{ reuseaddr, true }
	] ),
	
	sensomatic_web_deps:ensure(),
	sensomatic_web_sup:start_link().

%%==============================================================================
%% stop/1
%%==============================================================================
stop( _ ) -> ok.