-module( device_reg ).

-export( [ start_link/0, add/1, remove/1, list/0 ] ).

-behaviour( gen_server ).
-export( [ init/1, handle_call/3, handle_cast/2, handle_info/2, code_change/3, terminate/2 ] ).

-record( state, { devices = [] } ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% module api
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%==============================================================================
%% start_link/0
%%==============================================================================
start_link() ->
    gen_server:start_link( { local, ?MODULE }, ?MODULE, [], [] ).

%%==============================================================================
%% add/1
%%==============================================================================
add( DevicePid ) ->
	gen_server:cast( ?MODULE, { add, DevicePid } ).

%%==============================================================================
%% remove/1
%%==============================================================================
remove( DevicePid ) ->
	gen_server:cast( ?MODULE, { remove, DevicePid } ).

%%==============================================================================
%% list/0
%%==============================================================================
list() ->
	gen_server:call( ?MODULE, list ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% gen_Server Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%==============================================================================
%% init/1
%%==============================================================================
init( [] ) ->
	util:shout( "Starting device_reg gen_server..." ),
    { ok, #state{} }.

%%==============================================================================
%% handle_cast/2
%%==============================================================================
%% Add Device
%%------------------------------------------------------------------------------
handle_cast( { add, Device = { _, Pid } }, State ) ->
	util:shout( "Adding ~p to device_reg", [ Device ] ),
	erlang:monitor( process, Pid ),
	{ noreply, State#state{ devices = [ Device | State#state.devices ] } };
%%------------------------------------------------------------------------------
%% Remove Device
%%------------------------------------------------------------------------------
handle_cast( { remove, Device }, State ) ->
	util:shout( "Removing ~p from device_reg", [ Device ] ),
	{ noreply, State#state{ devices = lists:delete( Device, State#state.devices ) } };
%%------------------------------------------------------------------------------
%% Catch All
%%------------------------------------------------------------------------------
handle_cast( Cast, State ) ->
	util:shout( "unexpected cast: ~p", [ Cast ] ),
    { noreply, State }.

%%==============================================================================
%% handle_info/2
%%==============================================================================
%% Device Down
%% 
%% @spec handle_info( { 'DOWN', Ref, process, DownPid, Reason }, State ) -> { noreply, State }
%% @doc If a device process dies, then remove it from the registry, presuming it
%%      didn't remove itself when it terminated
handle_info( Msg = { 'DOWN', _, process, DownPid, _Reason }, State ) ->
	util:shout( "Device Down! ~p~n", [ Msg ] ),
	Devices = lists:dropwhile( fun( { _, DevicePid } ) ->
		if
			DevicePid =:= DownPid -> true;
			DevicePid =/= DownPid -> false 
		end
	end, State#state.devices ),
	{ noreply, State#state{ devices = Devices } };
%%------------------------------------------------------------------------------
%% Catch All
%%------------------------------------------------------------------------------
handle_info( Msg, State ) ->
    util:shout( "unexpected: ~p", [ Msg ] ),
    { noreply, State }.

%%==============================================================================
%% handle_call/3
%%==============================================================================
%%------------------------------------------------------------------------------
handle_call( list, _, S ) ->
	{ reply, S#state.devices, S };
%%------------------------------------------------------------------------------
%%------------------------------------------------------------------------------
handle_call( Call, _From, State ) ->
	util:shout( "unexpected call: ~p", [ Call ] ),
    { noreply, State }.

%%==============================================================================
%% code_change/3
%%==============================================================================
code_change( _OldVsn, State, _Extra ) ->
    { ok, State }.

%%==============================================================================
%% terminate/2
%%==============================================================================
%%------------------------------------------------------------------------------
terminate( normal, _State ) ->
    ok;
%%------------------------------------------------------------------------------
%%------------------------------------------------------------------------------
terminate( Reason, _State ) ->
    util:shout( "terminate reason: ~p~n", [ Reason ] ).