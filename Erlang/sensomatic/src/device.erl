-module( device ).

-export( [ 
	start_link/0,
	get_id/1,
	add_port/2,
	get_ports/1,
	commit/1,
	add_handler/3,
	get_port/2
] ).

-behaviour( gen_server ).
-export( [ 
	init/1, 
	handle_call/3, 
	handle_cast/2, 
	handle_info/2, 
	code_change/3, 
	terminate/2 
] ).

-record( state, { 
	port_sup,
	ports = [],
	event
} ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Module API
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%==============================================================================
%% start_link/1
%%==============================================================================
start_link() ->
    gen_server:start_link( ?MODULE, [], [] ).

get_id( Pid ) when is_pid( Pid ) ->
	gen_server:call( Pid, id ).

%%==============================================================================
%% add_port/2
%%==============================================================================
add_port( Pid, PortSpec ) ->
	gen_server:call( Pid, { add_port, PortSpec } ).

%%==============================================================================
%% get_ports/1
%%==============================================================================
get_ports( Pid ) when is_pid( Pid ) ->
	gen_server:call( Pid, ports ).
	
get_port( DevicePid, Id ) ->
	case proplists:lookup( Id, get_ports( DevicePid ) ) of
		{ _, PortPid, _ } -> PortPid;
		_ -> unknown
	end.

%%==============================================================================
%% commit/1
%%
%% Commit the port values to the hardware
%%==============================================================================
commit( Pid ) when is_pid( Pid ) ->
	gen_server:call( Pid, commit ).

%%==============================================================================
%% add_handler/3
%%==============================================================================
add_handler( Pid, Handler, Args ) ->
	gen_server:call( Pid, { add_handler, Handler, Args } ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% gen_server callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%==============================================================================
%% init
%%==============================================================================
init( [] ) ->
	util:shout( "Starting ~p gen_server...", [ ?MODULE ] ),
	{ ok, PortSup } = port_sup:start_link(),
	{ ok, EventPid } = gen_event:start_link(),
    { ok, #state{
    	port_sup = PortSup,
    	event = EventPid
    } }.

%%==============================================================================
%% handle_call
%%==============================================================================

%%------------------------------------------------------------------------------
%% Commit
%%------------------------------------------------------------------------------
handle_call( commit, _, State ) ->
	gen_event:notify( State#state.event, { commit, self() } ),
	{ reply, ok, State };

%%------------------------------------------------------------------------------
%% Add Handler 
%%------------------------------------------------------------------------------
handle_call( { add_handler, Handler, Args }, _, State ) ->
	{ reply,
		gen_event:add_handler( State#state.event, Handler, Args ),
	State };

%%------------------------------------------------------------------------------
%% Add Port
%%------------------------------------------------------------------------------
handle_call( { add_port, PortSpec }, _, State ) ->
	R = port_sup:start_child( State#state.port_sup, PortSpec ),
	{ reply, R, State };
%%------------------------------------------------------------------------------
%% Ports
%%------------------------------------------------------------------------------
handle_call( ports, _From, State ) ->
	Ports = lists:map( fun( { Id, Pid, _, _ } ) ->
		{ Id, Pid, port:get_value( Pid ) }
	end, lists:reverse( supervisor:which_children( State#state.port_sup ) ) ),
	{ reply, Ports, State };
%%------------------------------------------------------------------------------
%% Catch All
%%------------------------------------------------------------------------------
handle_call( _E, _From, State ) ->
	{ noreply, State }.

%%==============================================================================
%% handle_cast
%%==============================================================================
%% Catch All
%%------------------------------------------------------------------------------
handle_cast( _, State ) ->
	{ noreply, State }.

%%==============================================================================
%% handle_info
%%==============================================================================
%% Catch all
%%------------------------------------------------------------------------------
handle_info( E, S ) ->
	util:shout( "unexpected: ~p~n", [ E ] ),
	{ noreply, S }.

%%==============================================================================
%% code_change/3
%%==============================================================================
code_change( _OldVsn, State, _Extra ) ->
	{ ok, State }.

%%==============================================================================
%% terminate/2
%%==============================================================================
terminate( Reason, _State ) ->
	util:shout( "terminate reason: ~p~n", [ Reason ] ).

